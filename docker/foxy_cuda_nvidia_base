###########################################
# Base image 
###########################################
FROM nvidia/cuda:12.0.1-runtime-ubuntu20.04 AS base

SHELL [ "/bin/bash" , "-c" ]

# Install language
RUN apt-get update && apt-get install -y \
  locales \
  && locale-gen en_US.UTF-8 \
  && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
  && rm -rf /var/lib/apt/lists/*
ENV LANG en_US.UTF-8

# Install timezone
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \
  && export DEBIAN_FRONTEND=noninteractive \
  && apt-get update \
  && apt-get install -y tzdata \
  && dpkg-reconfigure --frontend noninteractive tzdata \
  && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get -y upgrade \
    && rm -rf /var/lib/apt/lists/*

# Install common programs
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    gnupg2 \
    lsb-release \
    sudo \
    software-properties-common \
    wget \
    && rm -rf /var/lib/apt/lists/* 
# Install ROS2
RUN apt-get update \ 
  && add-apt-repository universe \
  && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null \
  && apt-get update && apt-get install -y --no-install-recommends \
    ros-foxy-ros-base \
    python3-argcomplete \
  && rm -rf /var/lib/apt/lists/* 

# # Create Colcon workspace with external dependencies
# RUN mkdir -p /ros2_ws/src \
#   osrf-pycommon \
#   apt-get install python3-vcstool python3-rosinstall-generator python3-osrf-pycommon

# WORKDIR /ros2_ws

# Create Colcon workspace with external dependencies
# RUN rosinstall_generator --format repos mavlink | tee /tmp/mavlink.repos \
#     && rosinstall_generator --format repos --upstream mavros | tee -a /tmp/mavros.repos \
#     && vcs import src < /tmp/mavlink.repos \
#     && vcs import src < /tmp/mavros.repos \
#     && apt-get update -y \
#     && rosdep update \ 
#     && rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y \
#     && ./src/mavros/mavros/scripts/install_geographiclib_datasets.sh \
#     && source /opt/ros/foxy/setup.bash \
#     && colcon build --symlink-install 

ENV ROS_DISTRO=foxy
ENV AMENT_PREFIX_PATH=/opt/ros/foxy
ENV COLCON_PREFIX_PATH=/opt/ros/foxy
ENV LD_LIBRARY_PATH=/opt/ros/foxy/lib
ENV PATH=/opt/ros/foxy/bin:$PATH
ENV PYTHONPATH=/opt/ros/foxy/lib/python3.10/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2
ENV DEBIAN_FRONTEND=

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENV QT_X11_NO_MITSHM 1

# # Set up the entrypoint executes when you run the container
# COPY ./docker/entrypoint.sh /
# ENTRYPOINT [ "/entrypoint.sh" ]

###########################################
#  Develop image 
###########################################
FROM base AS develop

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
  bash-completion \
  build-essential \
  cmake \
  gdb \
  git \
  openssh-client \
  python3-argcomplete \
  python3-pip \
  ros-dev-tools \
  ros-foxy-mavros \ 
  vim \
  && rm -rf /var/lib/apt/lists/* \
  && rosdep init || echo "rosdep already initialized"

ARG USERNAME=ros
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create a non-root user
RUN groupadd --gid $USER_GID $USERNAME \
  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
  # [Optional] Add sudo support for the non-root user
  && apt-get update \
  && apt-get install -y sudo git-core bash-completion \
  && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
  && chmod 0440 /etc/sudoers.d/$USERNAME \
  # Cleanup
  && rm -rf /var/lib/apt/lists/* \
  && echo "if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi" >> /home/$USERNAME/.bashrc \
  && wget https://raw.githubusercontent.com/mavlink/mavros/ros2/mavros/scripts/install_geographiclib_datasets.sh \
  && sh ./install_geographiclib_datasets.sh

ENV DEBIAN_FRONTEND=
ENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1

###########################################
#  Full image 
###########################################
FROM develop AS full

ENV DEBIAN_FRONTEND=noninteractive
# Install python packages
RUN pip3 install -U \
  pexpect \
  pymavlink \
  casadi \ 
  setuptools \
  && rm -rf /var/lib/apt/lists/*

ENV DEBIAN_FRONTEND=

RUN git clone --recursive https://github.com/ArduPilot/ardupilot.git

###########################################
# Overlay image
###########################################
FROM full AS overlay

RUN mkdir -p /develop_ws/src \
  && echo "source /opt/ros/foxy/setup.bash" >> ~/.bashrc

# #make workspace and directory for source code
# RUN mkdir -p /develop_ws/src && \
#     cd /develop_ws/src && \
#     git clone https://github.com/jn89b/mpc_ros.git && \
#     git clone https://github.com/jn89b/drone_ros.git && \ 
#     cd ../ \
#     && colcon build --symlink-install \
#     && source install/setup.bash 

WORKDIR /develop_ws

# # Set up the entrypoint executes when you run the container
COPY ./docker/entrypoint.sh /
ENTRYPOINT [ "/entrypoint.sh" ]
